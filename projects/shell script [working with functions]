#!/bin/bash

# AWS Infrastructure Automation Script
# Demonstrates shell scripting with functions for AWS CLI validation and authentication
# Author: Maurice

# Configuration
SCRIPT_NAME="aws-infra-automation"
LOG_FILE="/var/log/${SCRIPT_NAME}.log"
AWS_CONFIG_FILE="$HOME/.aws/config"
AWS_CREDENTIALS_FILE="$HOME/.aws/credentials"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to log messages with timestamp
log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "[${timestamp}] ${level}: ${message}" | tee -a "$LOG_FILE"
}

# Function to print colored status messages
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
    log_message "STATUS" "$message"
}

# Function to validate script arguments
validate_arguments() {
    local expected_args=$1
    local actual_args=$2
    
    log_message "INFO" "Validating script arguments: expected=$expected_args, actual=$actual_args"
    
    if [ $actual_args -lt $expected_args ]; then
        log_message "ERROR" "Insufficient arguments provided. Expected $expected_args, got $actual_args"
        echo "Usage: $0 <bucket_name> <region> <operation_type>"
        echo "Example: $0 my-test-bucket us-east-1 create"
        return 1
    fi
    
    if [ $actual_args -gt $expected_args ]; then
        log_message "WARNING" "More arguments provided than expected. Extra arguments will be ignored"
    fi
    
    log_message "SUCCESS" "Argument validation passed"
    return 0
}

# Function to check AWS CLI installation
check_aws_cli_installation() {
    log_message "INFO" "Checking AWS CLI installation..."
    
    if command -v aws &> /dev/null; then
        local aws_version=$(aws --version 2>/dev/null | awk '{print $1}')
        log_message "SUCCESS" "AWS CLI installed: $aws_version"
        return 0
    else
        log_message "ERROR" "AWS CLI is not installed"
        return 1
    fi
}

# Function to validate AWS CLI version
validate_aws_cli_version() {
    local required_version="2.0.0"
    
    log_message "INFO" "Validating AWS CLI version (minimum required: $required_version)"
    
    local current_version=$(aws --version 2>/dev/null | awk '{print $1}' | cut -d'/' -f2)
    
    if [ "$(printf '%s\n' "$required_version" "$current_version" | sort -V | head -n1)" = "$required_version" ]; then
        log_message "SUCCESS" "AWS CLI version meets requirement: $current_version"
        return 0
    else
        log_message "ERROR" "AWS CLI version too old: $current_version (required: $required_version+)"
        return 1
    fi
}

# Function to check AWS configuration files
check_aws_configuration() {
    log_message "INFO" "Checking AWS configuration files..."
    
    local config_ok=true
    
    # Check if config file exists and has valid format
    if [ -f "$AWS_CONFIG_FILE" ]; then
        if grep -q "\[.*\]" "$AWS_CONFIG_FILE"; then
            log_message "SUCCESS" "AWS config file exists and has valid format"
        else
            log_message "ERROR" "AWS config file exists but has invalid format"
            config_ok=false
        fi
    else
        log_message "WARNING" "AWS config file does not exist at $AWS_CONFIG_FILE"
        config_ok=false
    fi
    
    # Check if credentials file exists and has valid format
    if [ -f "$AWS_CREDENTIALS_FILE" ]; then
        if grep -q "\[.*\]" "$AWS_CREDENTIALS_FILE"; then
            log_message "SUCCESS" "AWS credentials file exists and has valid format"
        else
            log_message "ERROR" "AWS credentials file exists but has invalid format"
            config_ok=false
        fi
    else
        log_message "WARNING" "AWS credentials file does not exist at $AWS_CREDENTIALS_FILE"
        config_ok=false
    fi
    
    if [ "$config_ok" = true ]; then
        return 0
    else
        return 1
    fi
}

# Function to validate AWS authentication
validate_aws_authentication() {
    local profile=${1:-default}
    
    log_message "INFO" "Validating AWS authentication for profile: $profile"
    
    # Check if we can call AWS STS GetCallerIdentity
    if aws sts get-caller-identity --profile "$profile" &> /dev/null; then
        local caller_identity=$(aws sts get-caller-identity --profile "$profile" --output json)
        local user_arn=$(echo "$caller_identity" | jq -r '.Arn')
        local account_id=$(echo "$caller_identity" | jq -r '.Account')
        
        log_message "SUCCESS" "AWS authentication valid for User: $user_arn, Account: $account_id"
        return 0
    else
        log_message "ERROR" "AWS authentication failed for profile: $profile"
        return 1
    fi
}

# Function to check AWS environment variables
check_aws_environment_variables() {
    log_message "INFO" "Checking AWS environment variables..."
    
    local vars_present=false
    
    # Check for common AWS environment variables
    if [ -n "$AWS_ACCESS_KEY_ID" ]; then
        log_message "INFO" "AWS_ACCESS_KEY_ID is set"
        vars_present=true
    fi
    
    if [ -n "$AWS_SECRET_ACCESS_KEY" ]; then
        log_message "INFO" "AWS_SECRET_ACCESS_KEY is set"
        vars_present=true
    fi
    
    if [ -n "$AWS_DEFAULT_REGION" ]; then
        log_message "INFO" "AWS_DEFAULT_REGION is set to: $AWS_DEFAULT_REGION"
        vars_present=true
    fi
    
    if [ -n "$AWS_PROFILE" ]; then
        log_message "INFO" "AWS_PROFILE is set to: $AWS_PROFILE"
        vars_present=true
    fi
    
    if [ "$vars_present" = true ]; then
        log_message "SUCCESS" "AWS environment variables are configured"
        return 0
    else
        log_message "WARNING" "No AWS environment variables found"
        return 1
    fi
}

# Function to activate AWS environment
activate_aws_environment() {
    local profile=$1
    local region=$2
    
    log_message "INFO" "Activating AWS environment: profile=$profile, region=$region"
    
    # Set environment variables
    export AWS_PROFILE="$profile"
    export AWS_DEFAULT_REGION="$region"
    
    # Validate the activated environment
    if validate_aws_authentication "$profile"; then
        log_message "SUCCESS" "AWS environment activated successfully"
        echo "AWS Environment Activated:"
        echo "  Profile: $profile"
        echo "  Region: $region"
        echo "  Account: $(aws sts get-caller-identity --query Account --output text)"
        return 0
    else
        log_message "ERROR" "Failed to activate AWS environment"
        return 1
    fi
}

# Function to validate S3 bucket name
validate_s3_bucket_name() {
    local bucket_name=$1
    
    log_message "INFO" "Validating S3 bucket name: $bucket_name"
    
    # Check if bucket name is provided
    if [ -z "$bucket_name" ]; then
        log_message "ERROR" "Bucket name cannot be empty"
        return 1
    fi
    
    # Check length (3-63 characters)
    if [ ${#bucket_name} -lt 3 ] || [ ${#bucket_name} -gt 63 ]; then
        log_message "ERROR" "Bucket name must be between 3 and 63 characters"
        return 1
    fi
    
    # Check if it contains invalid characters
    if [[ ! "$bucket_name" =~ ^[a-z0-9][a-z0-9.-]*[a-z0-9]$ ]]; then
        log_message "ERROR" "Bucket name must be DNS-compliant"
        return 1
    fi
    
    # Check for consecutive dots or dashes
    if echo "$bucket_name" | grep -q '\.\.' || echo "$bucket_name" | grep -q '\-\-'; then
        log_message "ERROR" "Bucket name cannot contain consecutive dots or dashes"
        return 1
    fi
    
    # Check if it looks like an IP address
    if [[ "$bucket_name" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        log_message "ERROR" "Bucket name cannot be formatted as an IP address"
        return 1
    fi
    
    log_message "SUCCESS" "Bucket name validation passed: $bucket_name"
    return 0
}

# Function to check if S3 bucket exists
check_s3_bucket_exists() {
    local bucket_name=$1
    
    log_message "INFO" "Checking if S3 bucket exists: $bucket_name"
    
    # Use aws s3api head-bucket as required
    if aws s3api head-bucket --bucket "$bucket_name" 2>/dev/null; then
        log_message "SUCCESS" "Bucket exists: $bucket_name"
        return 0
    else
        local error_code=$?
        case $error_code in
            254)
                log_message "INFO" "Bucket does not exist: $bucket_name"
                return 1
                ;;
            255)
                log_message "ERROR" "Error checking bucket existence: $bucket_name"
                return 2
                ;;
            *)
                log_message "ERROR" "Unknown error checking bucket: $error_code"
                return 2
                ;;
        esac
    fi
}

# Function to create S3 bucket
create_s3_bucket() {
    local bucket_name=$1
    local region=$2
    
    log_message "INFO" "Creating S3 bucket: $bucket_name in region: $region"
    
    # Validate bucket name first
    if ! validate_s3_bucket_name "$bucket_name"; then
        print_status "$RED" "Bucket name validation failed"
        return 1
    fi
    
    # Check if bucket already exists
    if check_s3_bucket_exists "$bucket_name"; then
        print_status "$YELLOW" "Bucket already exists: $bucket_name"
        return 0
    fi
    
    # Create bucket based on region
    local create_cmd
    if [ "$region" = "us-east-1" ]; then
        create_cmd="aws s3api create-bucket --bucket '$bucket_name'"
    else
        create_cmd="aws s3api create-bucket --bucket '$bucket_name' --create-bucket-configuration LocationConstraint='$region'"
    fi
    
    # Execute bucket creation
    log_message "INFO" "Executing: $create_cmd"
    if eval "$create_cmd" 2>> "$LOG_FILE"; then
        log_message "SUCCESS" "Bucket created successfully: $bucket_name"
        
        # Wait for bucket propagation
        sleep 5
        
        # Verify creation
        if check_s3_bucket_exists "$bucket_name"; then
            print_status "$GREEN" "Bucket creation verified: $bucket_name"
            return 0
        else
            print_status "$YELLOW" "Bucket created but verification pending: $bucket_name"
            return 0
        fi
    else
        log_message "ERROR" "Failed to create bucket: $bucket_name"
        return 1
    fi
}

# Function to perform pre-flight checks
perform_preflight_checks() {
    log_message "INFO" "Starting pre-flight checks..."
    
    local checks_passed=0
    local total_checks=5
    
    # Check 1: AWS CLI installation
    if check_aws_cli_installation; then
        ((checks_passed++))
        print_status "$GREEN" "✓ AWS CLI installation check passed"
    else
        print_status "$RED" "✗ AWS CLI installation check failed"
    fi
    
    # Check 2: AWS CLI version
    if validate_aws_cli_version; then
        ((checks_passed++))
        print_status "$GREEN" "✓ AWS CLI version check passed"
    else
        print_status "$RED" "✗ AWS CLI version check failed"
    fi
    
    # Check 3: AWS configuration
    if check_aws_configuration; then
        ((checks_passed++))
        print_status "$GREEN" "✓ AWS configuration check passed"
    else
        print_status "$YELLOW" "⚠ AWS configuration check has warnings"
        ((checks_passed++)) # Count warnings as passed for continuation
    fi
    
    # Check 4: Environment variables
    if check_aws_environment_variables; then
        ((checks_passed++))
        print_status "$GREEN" "✓ AWS environment variables check passed"
    else
        print_status "$YELLOW" "⚠ AWS environment variables check has warnings"
        ((checks_passed++)) # Count warnings as passed for continuation
    fi
    
    # Check 5: AWS authentication
    if validate_aws_authentication; then
        ((checks_passed++))
        print_status "$GREEN" "✓ AWS authentication check passed"
    else
        print_status "$RED" "✗ AWS authentication check failed"
    fi
    
    # Summary
    log_message "INFO" "Pre-flight checks completed: $checks_passed/$total_checks passed"
    
    if [ $checks_passed -eq $total_checks ]; then
        print_status "$GREEN" "All pre-flight checks passed!"
        return 0
    elif [ $checks_passed -ge 3 ]; then
        print_status "$YELLOW" "Some checks have warnings but can proceed"
        return 0
    else
        print_status "$RED" "Critical checks failed. Cannot proceed"
        return 1
    fi
}

# Function to demonstrate control flow with error handling
demonstrate_control_flow() {
    local bucket_name=$1
    local region=$2
    local operation=$3
    
    log_message "INFO" "Demonstrating control flow for operation: $operation"
    
    # Using case statement for operation type
    case "$operation" in
        "create")
            print_status "$BLUE" "Starting CREATE operation flow"
            if create_s3_bucket "$bucket_name" "$region"; then
                print_status "$GREEN" "CREATE operation completed successfully"
                return 0
            else
                print_status "$RED" "CREATE operation failed"
                return 1
            fi
            ;;
        "check")
            print_status "$BLUE" "Starting CHECK operation flow"
            if check_s3_bucket_exists "$bucket_name"; then
                print_status "$GREEN" "Bucket exists: $bucket_name"
                return 0
            else
                print_status "$YELLOW" "Bucket does not exist: $bucket_name"
                return 1
            fi
            ;;
        "validate")
            print_status "$BLUE" "Starting VALIDATE operation flow"
            if validate_s3_bucket_name "$bucket_name"; then
                print_status "$GREEN" "Bucket name is valid: $bucket_name"
                return 0
            else
                print_status "$RED" "Bucket name is invalid: $bucket_name"
                return 1
            fi
            ;;
        *)
            log_message "ERROR" "Unknown operation: $operation"
            echo "Valid operations: create, check, validate"
            return 1
            ;;
    esac
}

# Main function with comprehensive error handling
main() {
    local expected_args=3
    local actual_args=$#
    
    log_message "INFO" "Starting AWS Infrastructure Automation Script"
    
    # Validate arguments
    if ! validate_arguments $expected_args $actual_args; then
        exit 1
    fi
    
    # Extract arguments
    local bucket_name=$1
    local region=$2
    local operation=$3
    
    print_status "$BLUE" "Starting AWS operations with:"
    echo "  Bucket: $bucket_name"
    echo "  Region: $region"
    echo "  Operation: $operation"
    echo "  Log File: $LOG_FILE"
    
    # Perform pre-flight checks
    if ! perform_preflight_checks; then
        print_status "$RED" "Pre-flight checks failed. Exiting."
        exit 1
    fi
    
    # Activate AWS environment
    if ! activate_aws_environment "default" "$region"; then
        print_status "$RED" "Failed to activate AWS environment. Exiting."
        exit 1
    fi
    
    # Demonstrate control flow based on operation
    if demonstrate_control_flow "$bucket_name" "$region" "$operation"; then
        print_status "$GREEN" "Operation completed successfully"
        log_message "SUCCESS" "Script execution completed successfully"
    else
        print_status "$RED" "Operation failed"
        log_message "ERROR" "Script execution failed"
        exit 1
    fi
    
    # Final summary
    echo
    print_status "$GREEN" "=== SCRIPT EXECUTION SUMMARY ==="
    echo "Operation: $operation"
    echo "Bucket: $bucket_name"
    echo "Region: $region"
    echo "Status: COMPLETED"
    echo "Log File: $LOG_FILE"
}

# Trap signals for graceful shutdown
trap 'log_message "WARNING" "Script interrupted by user"; exit 1' INT TERM

# Check if script is being sourced or executed
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # Script is being executed
    main "$@"
fi
